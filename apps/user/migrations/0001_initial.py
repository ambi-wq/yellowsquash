# Generated by Django 2.2.6 on 2022-04-05 20:00

from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('program', '0001_initial'),
        ('auth', '0011_update_proxy_permissions'),
    ]

    operations = [
        migrations.CreateModel(
            name='CategoryList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=500, null=True, unique=True)),
                ('logo', models.TextField(blank=True, null=True)),
                ('is_selected', models.BooleanField(default=False)),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='ExpertList',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('username', models.CharField(max_length=255, unique=True, verbose_name='username')),
                ('mobile', models.CharField(blank=True, max_length=100, null=True)),
                ('short_description', models.TextField(blank=True, null=True)),
                ('professional_title', models.CharField(blank=True, max_length=100, null=True, verbose_name='professional_title')),
                ('title', models.CharField(choices=[('Dr', 'Dr'), ('Er', 'Er'), ('Mr', 'Mr'), ('Mrs', 'Mrs'), ('Miss', 'Miss'), ('Master', 'Master')], max_length=30)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='last name')),
                ('nick_name', models.CharField(blank=True, max_length=100, null=True)),
                ('user_type', models.CharField(blank=True, choices=[('admin', 'Admin'), ('customer', 'Customer'), ('expert', 'Expert')], default='customer', max_length=100)),
                ('biographic_info', models.CharField(blank=True, max_length=200, null=True)),
                ('user_img', models.CharField(blank=True, max_length=200, null=True, verbose_name='user image url')),
                ('email', models.CharField(blank=True, max_length=255, verbose_name='email address')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether the user is verified or not', verbose_name='verification status')),
                ('email_verified', models.BooleanField(default=False, help_text='Designates whether the user email is verified or not', verbose_name='email verification status')),
                ('mobile_verified', models.BooleanField(default=False, help_text='Designates whether the user mobile is verified or not', verbose_name='mobile verification status')),
                ('password', models.CharField(blank=True, default='', max_length=255, verbose_name='user password')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('designation', models.CharField(blank=True, max_length=500, null=True)),
                ('qualification', models.CharField(blank=True, max_length=500, null=True)),
                ('experience', models.CharField(blank=True, max_length=500, null=True)),
                ('experties', models.CharField(blank=True, max_length=500, null=True)),
                ('fb_link', models.CharField(blank=True, max_length=500, null=True, verbose_name='facebook profile link')),
                ('twitter_link', models.CharField(blank=True, max_length=500, null=True, verbose_name='twitter  profile link')),
                ('linked_link', models.CharField(blank=True, max_length=500, null=True, verbose_name='linkedin profile link')),
                ('google_link', models.CharField(blank=True, max_length=500, null=True, verbose_name='google profile link')),
                ('tinode_token', models.CharField(blank=True, max_length=500, null=True, verbose_name='token for chat and all')),
                ('is_favorite', models.BooleanField(default=False, verbose_name='is users favorite expert')),
                ('categories', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('expert_score', models.IntegerField(blank=True, default=0, null=True)),
            ],
            options={
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 30 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=255, unique=True, validators=[django.core.validators.RegexValidator('^[\\w.@+-]+$')], verbose_name='username')),
                ('mobile', models.CharField(blank=True, max_length=100, null=True)),
                ('title', models.CharField(blank=True, choices=[('Dr', 'Dr'), ('Er', 'Er'), ('Mr', 'Mr'), ('Mrs', 'Mrs'), ('Miss', 'Miss'), ('Master', 'Master')], max_length=30, null=True)),
                ('first_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, null=True, verbose_name='last name')),
                ('nick_name', models.CharField(blank=True, max_length=100, null=True)),
                ('user_type', models.CharField(blank=True, choices=[('admin', 'Admin'), ('customer', 'Customer'), ('expert', 'Expert')], default='customer', max_length=100)),
                ('biographic_info', models.TextField(blank=True, null=True)),
                ('profile_picture', models.ImageField(blank=True, default='profile1.png', null=True, upload_to='')),
                ('user_img', models.TextField(blank=True, null=True)),
                ('email', models.CharField(blank=True, max_length=255, null=True, unique=True, validators=[django.core.validators.RegexValidator('^[а-яА-Яa-zA-Z0-9_.+-]+@[а-яА-Яa-zA-Z0-9-]+\\.[а-яА-Яa-zA-Z0-9-.]+$', 'Enter a valid email address.')], verbose_name='email address')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether the user is verified or not', verbose_name='verification status')),
                ('email_verified', models.BooleanField(default=False, help_text='Designates whether the user email is verified or not', verbose_name='email verification status')),
                ('mobile_verified', models.BooleanField(default=False, help_text='Designates whether the user mobile is verified or not', verbose_name='mobile verification status')),
                ('password', models.CharField(blank=True, default='', max_length=255, verbose_name='user password')),
                ('expert_score', models.IntegerField(blank=True, default=0, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('short_description', models.TextField(blank=True, null=True)),
                ('designation', models.CharField(blank=True, max_length=500, null=True)),
                ('qualification', models.CharField(blank=True, max_length=500, null=True)),
                ('experience', models.CharField(blank=True, max_length=500, null=True)),
                ('experties', models.CharField(blank=True, max_length=500, null=True)),
                ('fb_link', models.CharField(blank=True, max_length=500, null=True, verbose_name='facebook profile link')),
                ('twitter_link', models.CharField(blank=True, max_length=500, null=True, verbose_name='twitter  profile link')),
                ('linked_link', models.CharField(blank=True, max_length=500, null=True, verbose_name='linkedin profile link')),
                ('google_link', models.CharField(blank=True, max_length=500, null=True, verbose_name='google profile link')),
                ('tinode_token', models.CharField(blank=True, max_length=500, null=True, verbose_name='token for chat and all')),
                ('language', models.CharField(default='English', max_length=250, verbose_name='language')),
                ('professional_title', models.CharField(blank=True, max_length=100, null=True, verbose_name='professional_title')),
                ('location', models.CharField(blank=True, max_length=150, null=True, verbose_name='location')),
                ('video_url', models.CharField(blank=True, max_length=100, null=True, verbose_name='about expert video url')),
                ('is_profile_complete', models.BooleanField(default=False)),
            ],
            options={
                'ordering': ['first_name'],
            },
        ),
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(blank=True, max_length=500, null=True, unique=True)),
                ('logo', models.TextField(blank=True, null=True)),
                ('logo_image', models.ImageField(blank=True, null=True, upload_to='logo')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30, unique=True)),
                ('max_num_of_vehicle_allowed', models.IntegerField(default=2)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date joined')),
                ('last_updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='creted_by_user', to=settings.AUTH_USER_MODEL, verbose_name='created by user')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='updated_by_user', to=settings.AUTH_USER_MODEL, verbose_name='updated by user')),
            ],
        ),
        migrations.CreateModel(
            name='UserCourseNameSuggestions',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=100, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='VerifyOtp',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('otp', models.CharField(max_length=50)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='user_who_wants_to_verify_email_or_mobile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserOrder',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('amount', models.DecimalField(decimal_places=2, max_digits=20, verbose_name='order amount in paisa')),
                ('order_id', models.CharField(max_length=500, null=True)),
                ('payment_id', models.CharField(max_length=500, null=True)),
                ('order_request', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('order_response_before_payment', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('order_response_after_payment', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('payment_request', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('payment_response_from_ui', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('payment_response_on_fetch', django.contrib.postgres.fields.jsonb.JSONField(null=True)),
                ('payment_status', models.CharField(choices=[('pending', 'Pending'), ('completed', 'Completed'), ('failed', 'Failed')], default='pending', max_length=100)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='order creation timestamp')),
                ('last_updated_at', models.DateTimeField(auto_now=True, verbose_name='order updation timestamp')),
                ('programBatch', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='programBatch', to='program.ProgramBatch')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='buyer', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='UserIntrestOrExpertise',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='category', to='user.Category')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='intrested_or_expert_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='Permission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=30)),
                ('description', models.TextField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('last_updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permission_creted_by_user', to=settings.AUTH_USER_MODEL)),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='permission_updated_by_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='GroupPermission',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_access', models.CharField(choices=[('all', 'All'), ('portal', 'Portal')], default='all', max_length=255)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='creation date')),
                ('last_updated_at', models.DateTimeField(auto_now=True)),
                ('status', models.CharField(choices=[('active', 'Active'), ('inactive', 'Inactive')], default='active', max_length=10)),
                ('created_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_permission_creted_by_user', to=settings.AUTH_USER_MODEL)),
                ('group', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group', to='user.Group')),
                ('permission', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='permission_to_group', to='user.Permission')),
                ('updated_by', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='group_permission_updated_by_user', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.AddField(
            model_name='user',
            name='category',
            field=models.ManyToManyField(related_name='user_intrests_or_experties', through='user.UserIntrestOrExpertise', to='user.Category'),
        ),
        migrations.AddField(
            model_name='user',
            name='group',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='user.Group'),
        ),
        migrations.AddField(
            model_name='user',
            name='groups',
            field=models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups'),
        ),
        migrations.AddField(
            model_name='user',
            name='user_permissions',
            field=models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions'),
        ),
        migrations.CreateModel(
            name='UserEducationDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('course_name', models.CharField(max_length=100, verbose_name='user course name')),
                ('institution_name', models.CharField(max_length=100, verbose_name='user institution name')),
                ('completion_year', models.CharField(blank=True, max_length=20, null=True, verbose_name='completion year')),
                ('description', models.TextField()),
                ('certificate_doc', models.FileField(blank=True, null=True, upload_to='')),
                ('certificate_doc_url', models.CharField(blank=True, max_length=200, null=True, verbose_name='actual certificate url')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='certified_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'course_name')},
            },
        ),
        migrations.CreateModel(
            name='UserDeviceToken',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('device_token', models.CharField(max_length=500)),
                ('device', models.CharField(blank=True, default='webapp', max_length=250, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='user token creation timestamp')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='device_user', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'device_token')},
            },
        ),
        migrations.CreateModel(
            name='FavoriteExpert',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='date added')),
                ('expert', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='expert_id', to=settings.AUTH_USER_MODEL)),
                ('user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, related_name='user_who_liked_expert_id', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'unique_together': {('user', 'expert')},
            },
        ),
    ]
